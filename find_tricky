#!/usr/bin/env python3

#   Copyright 2020 Google LLC

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       https://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


import argparse
import json

import context
import fec
import five38

def parse_args():
    parser = argparse.ArgumentParser()
    return parser.parse_args()

def find_nond_nonr():
    #args = parse_args()
    ctx = context.get()
    f38 = {c['district']:c for c in five38.house_toplines_deluxe(ctx)}
    districts = {}
    for c in fec.totals(ctx, 'H'):
        district = fec.district(c)
        districts.setdefault(district, []).append(c)
    for k, v in f38.items():
        if float(v['winner_Dparty']) > 0.99 or float(v['winner_Rparty']) > 0.99:
            continue
        fv = districts[k]
        fv.sort(key=lambda c: c['receipts'], reverse=True)
        for c in fv:
            if not fec.is_rep(c):
                if c['party'] not in ['DEM', 'DFL']:
                    print(k)
                    print(json.dumps(v, indent=4))
                    print(json.dumps(c, indent=4))
                    print("================================")
                    #print(c['party_full'])
                break

def find_district_name_mismatches():
    #args = parse_args()
    ctx = context.get()
    districts_538 = {
        c["district"]
            for c in five38.house_toplines_deluxe(ctx)}
    districts_fec = {
        fec.district(c)
            for c in fec.totals(ctx, 'H')
    }
    for d in sorted(districts_538 - districts_fec):
        print(f"< {d}")
    for d in sorted(districts_fec - districts_538):
        print(f"> {d}")

if __name__ == "__main__":
    find_nond_nonr()
