#!/usr/bin/env python3

#   Copyright 2020 Google LLC

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       https://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


import argparse
import datetime

import matplotlib.pyplot as plt

import context
import fec
import five38

def get_incumbents():
    incumbents_rev = {
        "red": "AL AK AR FL ID IN IA KS KY LA MO NC ND OH OK PA SC SD UT WI",
        "blue": "AZ CA CO CT GA HI IL MA NV NH NY OR VT WA"
    }
    incumbents = {"OK-S2": "red"}
    for k, v in incumbents_rev.items():
        for vv in v.split():
            if vv in incumbents:
                raise Exception("ow")
            incumbents[f"{vv}-S3"] = k
    return incumbents

def get_receipts(ctx):
    specials = {"HORN, KENDRA"}
    receipts = {}
    for d in fec.totals(ctx, 'S'):
        if d['party'] == "REP":
            continue
        district = d['state'] + ("-S2" if d['name'] in specials else "-S3")
        receipts[district] = max(receipts.get(district, 0), d['receipts'])
    return receipts

def plot(ctx):
    incumbents = get_incumbents()
    receipts = get_receipts(ctx)
    fig = plt.figure()
    ax = fig.add_subplot(1,1,1)
    ax.autoscale(False)
    ax.set_xbound([-0.05, 1.05])
    ax.set_ybound([0, 1.1 * max(receipts.values())/1E6])
    ax.set_title("Senate seats, neglectedness and tractability")
    ax.set_xlabel("538 GOP probability (deluxe model)")
    ax.set_ylabel("FEC receipts by top non-GOP candidate ($M)")
    for d in five38.senate_toplines_deluxe(ctx):
        rprob = float(d['winner_Rparty'])
        if abs(rprob - 0.50) > 0.49:
            continue
        district = d['district']
        text = district.replace("-S3", "").replace("-S2", "-S")
        ax.text(rprob, receipts[district]/1E6, text,
            ha="center", va="center", color=incumbents.get(district, 'black'))
    plt.figtext(0.02, 0.02, f"@ciphergoth {datetime.date.today().isoformat()}",
        ha='left', va='bottom', fontsize='small')

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--outfile")
    return parser.parse_args()

def main():
    args = parse_args()
    ctx = context.get()
    plot(ctx)
    if args.outfile is not None:
        plt.savefig(args.outfile, dpi=300, backend='agg')
    else:
        plt.show()

if __name__ == "__main__":
    main()
