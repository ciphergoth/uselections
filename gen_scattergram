#!/usr/bin/env python3

#   Copyright 2020 Google LLC

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       https://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


import argparse
import codecs
import csv

import matplotlib.pyplot as plt

import context
import fec

def get_incumbents():
    incumbents_rev = {
        "red": "ME IA NC MT LA CO GA AZ KS SC AK TX KY MS ID OK SD NE WV AR TN WY",
        "blue": "AL MI MN NM NH VA IL NJ OR DE MA RI"
    }
    incumbents = {}
    for k, v in incumbents_rev.items():
        for vv in v.split():
            if vv in incumbents:
                raise Exception("ow")
            incumbents[vv] = k
    return incumbents

def get_receipts(ctx):
    specials = {"KELLY, MARK", "WARNOCK, RAPHAEL"}
    receipts = {}
    for d in fec.totals(ctx):
        if d['party'] == "REP":
            continue
        district = d['state'] + ("-S3" if d['name'] in specials else "-S2")
        receipts[district] = max(receipts.get(district, 0), d['receipts'])
    return receipts

def senate_toplines_deluxe(ctx):
    url = "https://projects.fivethirtyeight.com/2020-general-data/senate_state_toplines_2020.csv"
    with ctx.session.get(url, stream=True) as r:
        r.raise_for_status()
        done = set()
        for d in csv.DictReader(codecs.iterdecode(r.iter_lines(), 'utf-8')):
            if d['expression'] != '_deluxe':
                continue
            district = d['district']
            if district in done:
                continue
            done.add(district)
            yield d

def plot(ctx):
    incumbents = get_incumbents()
    receipts = get_receipts(ctx)
    fig = plt.figure()
    ax = fig.add_subplot(1,1,1)
    ax.autoscale(False)
    ax.set_xbound([-0.05, 1.05])
    ax.set_ybound([0, 1.1 * max(receipts.values())/1E6])
    ax.set_title("Senate seats, neglectedness and tractability")
    ax.set_xlabel("538 GOP probability (deluxe model)")
    ax.set_ylabel("FEC receipts by top non-GOP candidate ($M)")
    for d in senate_toplines_deluxe(ctx):
        rprob = float(d['winner_Rparty'])
        if abs(rprob - 0.50) > 0.49:
            continue
        district = d['district']
        ax.text(rprob, receipts[district]/1E6, district,
            ha="center", va="center", color=incumbents[district[:2]])

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--outfile")
    return parser.parse_args()

def main():
    args = parse_args()
    ctx = context.get()
    plot(ctx)
    if args.outfile is not None:
        plt.savefig(args.outfile, dpi=300, backend='agg')
    else:
        plt.show()

def maiin():
    ctx = context.get()
    for d in senate_toplines_deluxe(ctx):
        if d['district'][2:5] != '-S2':
            print(d)


if __name__ == "__main__":
    main()
